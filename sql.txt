ALTER TABLE  `pedido` ADD  `correlativo_dia` INT( 4 ) NOT NULL AFTER  `numpedido`;
ALTER TABLE  `carta_lista` CHANGE  `cantidad`  `cantidad` CHAR( 10 ) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;
ALTER TABLE  `carta_lista` CHANGE  `cant_preparado`  `cant_preparado` CHAR( 10 ) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;
ALTER TABLE  `carta_lista` ADD  `sec_orden` INT( 2 ) NOT NULL AFTER  `cant_preparado`;

------------------------------------

ALTER TABLE  `conf_print_adicionales` ADD  `idseccion` INT( 10 ) NOT NULL AFTER  `idtipo_consumo`;
ALTER TABLE  `pedido` ADD  `solo_llevar` INT( 1 ) NOT NULL DEFAULT  '0' AFTER  `total`;
ALTER TABLE  `pedido` ADD  `idtipo_consumo` INT( 10 ) NOT NULL COMMENT  'firts id' AFTER  `solo_llevar`;

tabla: pedido_subtotales


ALTER TABLE  `carta_lista` ADD  `idcarta_listax` CHAR( 20 ) NOT NULL AFTER  `idcarta_lista`;
UPDATE carta_lista SET idcarta_listax=idcarta_lista;
ALTER TABLE carta_lista DROP idcarta_lista;
ALTER TABLE  `carta_lista` CHANGE  `idcarta_listax`  `idcarta_lista` CHAR( 20 ) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;

----------------------------------------

ALTER TABLE  `pedido_detalle` ADD  `secambio` INT( 2 ) NOT NULL DEFAULT  '0' AFTER  `descripcion`;
ALTER TABLE  `pedido_detalle` ADD  `borrado` INT( 2 ) NOT NULL DEFAULT  '0' AFTER  `descripcion`;
ALTER TABLE  `pedido` ADD  `idusuario` INT( 10 ) NOT NULL AFTER  `idcliente`;
ALTER TABLE  `tipo_pago` ADD  `limite` INT( 1 ) NOT NULL DEFAULT  '0' COMMENT  '1:puede poner cualquier monto' AFTER  `descripcion`;
UPDATE  `restobar`.`tipo_pago` SET  `limite` =  '1' WHERE  `tipo_pago`.`idtipo_pago` =1;
UPDATE  `restobar`.`tipo_pago` SET  `descripcion` =  'EFECTIVO' WHERE  `tipo_pago`.`idtipo_pago`=1;
ALTER TABLE  `pedido` ADD  `idregistro_pago` INT( 10 ) NOT NULL AFTER  `idusuario`;
ALTER TABLE  `ie_caja` CHANGE  `fecha_cierre`  `cierre` INT( 1 ) NOT NULL DEFAULT  '0';
ALTER TABLE  `pedido` CHANGE  `fecha_cierre`  `cierre` INT( 1 ) NOT NULL DEFAULT  '0';

ALTER TABLE  `seccion` CHANGE  `imprimir`  `imprimir` INT( 1 ) NOT NULL DEFAULT  '0' COMMENT  '1:no mostrar al imprimir la carta';
ALTER TABLE  `seccion` ADD  `ip_print` VARCHAR( 30 ) NOT NULL AFTER  `imprimir`;
ALTER TABLE  `pedido` ADD  `idcategoria` INT( 10 ) NOT NULL AFTER  `idtipo_consumo`;
ALTER TABLE  `seccion` CHANGE  `ip_print`  `idimpresora` INT( 10 ) NOT NULL;
ALTER TABLE  `pedido_detalle` ADD  `pagado` INT( 1 ) NOT NULL DEFAULT  '0' COMMENT  'pagado items' AFTER  `borrado`;


tabla:  pedido_borrados
	pedido_cambios
	cliente
	registro_pago
	registro_pago_detalle


------------------------------------------------------------------------

ALTER TABLE  `pedido` ADD  `motivo_anular` VARCHAR( 80 ) NOT NULL AFTER  `cierre`;

----------------------------------------------------------------------------

ALTER TABLE  `producto` ADD  `enlazar` INT( 1 ) NOT NULL DEFAULT  '0' COMMENT  'enlaza con la porcion al momento de la compra ej: huevos' AFTER  `stock_minimo`
ALTER TABLE  `registro_pago` ADD  `idtipo_consumo` INT( 10 ) NOT NULL AFTER  `idusuario`;
ALTER TABLE  `conf_print_otros` CHANGE  `idtipo_otro`  `idtipo_otro` INT( 10 ) NOT NULL COMMENT  '-1:precuenta -2:comprobantes -3cierre caja -4listado compras';
INSERT INTO `restobar`.`conf_print_otros` (`conf_print_otros`, `idorg`, `idsede`, `idtipo_otro`, `idimpresora`, `esalmacen`, `estado`) VALUES (NULL, '1', '1', '-4', '1', '0', '0');

--

ALTER TABLE  `pedido_detalle` CHANGE  `idcarta_lista`  `idcarta_lista` VARCHAR( 20 ) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL COMMENT  'para bodoga=idalmacen_items';
---------------------------------------------------------------------------------

ALTER TABLE  `conf_print` ADD  `var_margen_iz` INT( 3 ) NOT NULL DEFAULT  '0' COMMENT  'margen izquierda para centrar si la letra es pequeña,0 x default` AFTER  `logo`;
ALTER TABLE  `conf_print` ADD  `var_size_font` INT( 1 ) NOT NULL DEFAULT  '0' COMMENT  '0=A(x default) 1=B 3=C' AFTER  `var_margen_iz`;

ALTER TABLE  `impresora` ADD  `var_margen_iz` INT( 3 ) NOT NULL DEFAULT  '0' COMMENT  'margen izquierda para centrar si la letra es pequeña,0 x default' AFTER  `descripcion`;
ALTER TABLE  `impresora` ADD  `var_size_font` INT( 1 ) NOT NULL DEFAULT  '0' COMMENT  '0=A(x default) 1=B 3=C' AFTER  `var_margen_iz`;
--------------------------------------------------------------------------------------

almacen_ie
almacen_ie_detalle


---------------------------------------------------------------
producto_stock
producto_motivo_es
kardex
kardex_detalle
registro_pago_pedido

ALTER TABLE  `producto` ADD `stock` INT( 11 ) NOT NULL AFTER  `stock_minimo`;
ALTER TABLE  `almacen_ie` ADD  `idproducto_motivo_es` INT( 1 ) NOT NULL AFTER  `idalmacen`;
ALTER TABLE  `pedido_detalle` ADD  `procede_tabla` VARCHAR( 80 ) NOT NULL AFTER  `procede`;
ALTER TABLE  `pedido_detalle` ADD  `estado_trigger` INT( 1 ) NOT NULL DEFAULT  '0' COMMENT  'para saber que item esta pagando, trigger registro_pago_pedido' AFTER  `procede_tabla`;
ALTER TABLE  `pedido_detalle` ADD  `idregistro_pago` INT( 10 ) NOT NULL AFTER  `estado_trigger`;
ALTER TABLE  `pedido_borrados` ADD  `procede_tabla` VARCHAR( 80 ) NOT NULL AFTER  `fecha_cierre`;

exportar trigger

CREATE TRIGGER `items_pagados` AFTER INSERT ON `registro_pago_pedido`
 FOR EACH ROW begin
update pedido_detalle set idregistro_pago=new.idregistro_pago where idpedido=new.idpedido and estado_trigger=1;
update pedido_detalle set estado_trigger=0 where idpedido=new.idpedido and estado_trigger=1;
end

CREATE TRIGGER `kardex_ingreso` AFTER INSERT ON `compra`
 FOR EACH ROW insert into kardex (idoperacion,idorg,idsede,idalmacen,tipo_operacion,fecha,documento)
values (concat('C',new.idcompra), new.idorg,new.idsede,new.idalmacen,1,new.f_compra,new.nota_de_compra)

CREATE TRIGGER `stock_en_insert_pedido` AFTER INSERT ON `pedido_detalle`
 FOR EACH ROW if(new.procede_tabla='carta_lista')then
 update carta_lista set cantidad=if(cantidad!='ND',cantidad-new.cantidad,'ND') where idcarta_lista=new.idcarta_lista;
elseif (new.procede_tabla='almacen_items') then
 update producto_stock set stock=stock-new.cantidad where idproducto_stock=new.idcarta_lista;
elseif (new.procede_tabla='porcion') then 
 UPDATE porcion AS p
	LEFT JOIN item_ingrediente AS ii using (idporcion)
 SET p.stock=p.stock - (new.cantidad*(ii.cantidad))
 WHERE ii.iditem=new.iditem;
end if

CREATE TRIGGER `stock_en_update_pedido` BEFORE UPDATE ON `pedido_detalle`
 FOR EACH ROW begin
if(new.procede_tabla='carta_lista' and new.modificado=1)then
 update carta_lista set cantidad=if(cantidad!='ND',cantidad+1,'ND') where idcarta_lista=new.idcarta_lista; 
elseif (new.procede_tabla='almacen_items' and new.modificado=1) then 
 update producto_stock set stock=stock+1 where idproducto_stock=new.idcarta_lista;
elseif (new.procede_tabla='porcion' and new.modificado=1) then 
 UPDATE porcion AS p
	LEFT JOIN item_ingrediente AS ii using (idporcion)
 SET p.stock=p.stock + ((1)*(ii.cantidad))
 WHERE ii.iditem=new.iditem;  
end if;
set new.modificado=0;
end

CREATE TRIGGER `stock_insert_add_compra` AFTER INSERT ON `compra_items`
 FOR EACH ROW IF NOT EXISTS (SELECT idproducto FROM producto_stock WHERE idproducto = new.idproducto AND idalmacen = ( SELECT idalmacen FROM compra WHERE idcompra = new.idcompra ))THEN 
	INSERT INTO producto_stock( idproducto, idalmacen, stock ) VALUES (new.idproducto, (SELECT idalmacen FROM compra WHERE idcompra = new.idcompra), new.cantidad);
ELSE 
	UPDATE producto_stock SET stock = stock + new.cantidad WHERE idproducto = new.idproducto AND idalmacen = ( SELECT idalmacen FROM compra WHERE idcompra = new.idcompra ) ;
END IF

CREATE TRIGGER `stock_insert_almacen_i` BEFORE INSERT ON `almacen_ie_detalle`
 FOR EACH ROW IF new.procede=0 THEN
UPDATE producto_stock SET stock = stock + new.cantidad WHERE idproducto=new.idp and idalmacen=(select idalmacen from almacen_ie where idalmacen_ie=new.idalmacen_ie);
else
update porcion set stock=stock+new.cantidad where idporcion=new.idp;
END IF
	---
	kardex_ingreso - de compras
	kardex_ingreso_detalle - de compra_detalle
	kardex_ingreso_almacen - de alamcen_?ie
	kardex_ingreso_detalle_almacen  alamcen_?ie_detalle


crear producto_stock 
	stock segun almacen relacionar trigger

manejo el stock en pedidos pedido_detalle(descuento + aumento)	
- stock_en_insert_pedido
- stock_en_update_pedido

- stock_insert_almacen_i - salidas o entradas del almacen almacen_ie_detalle
- stock_insert_add_compra - en compras compra_items

-items_pagados






'update producto set stock=stock+new.cantidad where idproducto=new.idproducto;

--por ver si se utiliza
insert into kardex_detalle(idoperacion,idp,procede,cantidad,valor_unitario,stock_a_fecha)
	values (concat('C',new.idcompra),new.idproducto,0,new.cantidad,new.punitario,(select stock from producto where idproducto=new.idproducto))

-----------------------------------------------------------------------------------


ALTER TABLE  `impresora` ADD  `local` INT( 1 ) NOT NULL DEFAULT  '0' COMMENT  '1: es impresora local, mandar un copia del pedido' AFTER  `var_size_font`;
ALTER TABLE  `seccion` ADD  `sec_orden` INT( 1 ) NOT NULL AFTER  `idimpresora`;
ALTER TABLE  `seccion` ADD  `ver_stock_cero` INT( 1 ) NOT NULL DEFAULT  '0' AFTER  `sec_orden`;

ALTER TABLE  `registro_pago_pedido` ADD  `tt_x_idpedido` INT NOT NULL COMMENT  'total por pedido (suma de todos los idpedido_detalle)' AFTER  `idpedido_detalle`;
ALTER TABLE  `pedido_borrados` ADD  `idpedido` INT( 10 ) NOT NULL AFTER  `idpedido_borrados`;
ALTER TABLE  `pedido_borrados` ADD  `importe` VARCHAR( 8 ) NOT NULL AFTER  `idusuario_permiso`;

ALTER TABLE  `pedido_detalle` CHANGE  `procede_tabla`  `procede_tabla` INT( 1 ) NOT NULL COMMENT  '(0=almacen_items o producto 1=carta lista 2=porcion)';
ALTER TABLE  `pedido_borrados` CHANGE  `procede_tabla`  `procede_tabla` INT( 1 ) NOT NULL COMMENT  '(0=almacen_items o producto 1=carta lista 2=porcion)';
ALTER TABLE  `producto_familia` ADD  `idimpresora` INT( 10 ) NOT NULL AFTER  `descripcion`;
ALTER TABLE  `pedido_detalle` ADD  `despachado` INT( 0 ) NOT NULL COMMENT  'si ya fue despachado' AFTER  `modificado`;

ALTER TABLE  `pedido_detalle` ADD  `despachado_hora` VARCHAR( 60 ) NOT NULL AFTER  `despachado`;
ALTER TABLE  `pedido` CHANGE  `estado`  `estado` INT( 1 ) NOT NULL DEFAULT  '0' COMMENT  '0: nuevo, 1:despachado, 2:pagado 3:anulado 4:retirado de despacho';
ALTER TABLE  `pedido_detalle` ADD  `despachado_tiempo` VARCHAR( 60 ) NOT NULL AFTER  `despachado_hora`;

ALTER TABLE  `pedido` ADD  `total_r` CHAR( 10 ) NOT NULL AFTER  `total;
ALTER TABLE  `pedido` CHANGE  `total_r`  `total_r` CHAR( 10 ) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL COMMENT  'registra el total del pedido con el campo total se hacen cambios';
ALTER TABLE  `pedido_detalle` ADD  `ptotal_r` VARCHAR( 5 ) NOT NULL AFTER  `ptotal`;

ALTER TABLE  `registro_pago` ADD  `fecha_cierre` VARCHAR( 80 ) NOT NULL AFTER  `total`;
ALTER TABLE  `registro_pago` ADD  `motivo_anular` VARCHAR( 180 ) NOT NULL AFTER  `cierre`;
ALTER TABLE  `registro_pago` ADD  `idusuario_permiso` INT( 10 ) NOT NULL COMMENT  'usuario permiso borrar' AFTER  `idusuario`;


ALTER TABLE  `registro_pago_pedido` ADD  `cantidad` VARCHAR( 10 ) NOT NULL AFTER  `tt_x_idpedido`;
ALTER TABLE  `registro_pago_pedido` ADD  `total` VARCHAR( 10 ) NOT NULL AFTER  `cantidad`;
ALTER TABLE  `registro_pago_pedido` CHANGE  `idpedido_detalle`  `idpedido_detalle` INT( 10 ) NOT NULL COMMENT  'id''s pagados '	


------ desplegado solo en BT ---

ALTER TABLE  `impresora` CHANGE  `descripcion`  `descripcion` VARCHAR( 50 ) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL COMMENT  'descripcion impresora o Zona de despacho';
ALTER TABLE  `impresora` ADD  `minutos_pedido` VARCHAR( 10 ) NOT NULL COMMENT  'Tiempo promedio en minutos para despachar pedido' AFTER  `local`;
ALTER TABLE  `pedido_detalle` ADD  `cantidad_r` VARCHAR( 5 ) NOT NULL AFTER  `ptotal_r`;

------ -----------
ALTER TABLE  `pedido` ADD  `despachado` INT( 1 ) NOT NULL DEFAULT  '0' COMMENT  '1: despachado 2:retirado de despacho' AFTER  `motivo_anular`;
ALTER TABLE  `pedido` CHANGE  `estado`  `estado` INT( 1 ) NOT NULL DEFAULT  '0' COMMENT  '0: nuevo, 1:x, 2:pagado 3:anulado ';

DROP TRIGGER IF EXISTS `despacho`;CREATE DEFINER=`root`@`localhost` TRIGGER `despacho` AFTER UPDATE ON `pedido_detalle` FOR EACH ROW IF(new.despachado=1)then
UPDATE pedido as p
	SET despachado=1
WHERE p.idpedido=new.idpedido and NOT exists(
	SELECT pd.despachado
	FROM pedido_detalle AS pd 
		INNER JOIN seccion AS s using(idseccion)
	WHERE pd.idpedido=new.idpedido AND pd.despachado=0);
end if

--------

DROP TRIGGER IF EXISTS `restar_pedido_pd`;CREATE DEFINER=`root`@`localhost` TRIGGER `restar_pedido_pd` AFTER INSERT ON `registro_pago_pedido` FOR EACH ROW begin
update pedido_detalle set cantidad=(cantidad-new.cantidad), ptotal=format(ptotal-new.total,2),pagado=if(ptotal=0,1,0), idregistro_pago=new.idregistro_pago where idpedido_detalle=new.idpedido_detalle;
update pedido set total=total-new.total, estado=if(total=0,2,estado),idregistro_pago=if(total=0,new.idregistro_pago,idregistro_pago) where idpedido=new.idpedido;
update pedido_detalle set pagado=if(ptotal="0.00",1,0), idregistro_pago=new.idregistro_pago where idpedido_detalle=new.idpedido_detalle;
update pedido set estado=if(total=0,2,estado),idregistro_pago=if(total=0,new.idregistro_pago,idregistro_pago) where idpedido=new.idpedido;
end

-----------------
DROP TRIGGER IF EXISTS `stock_en_update_pedido`;CREATE DEFINER=`root`@`localhost` TRIGGER `stock_en_update_pedido` BEFORE UPDATE ON `pedido_detalle` FOR EACH ROW begin
if(new.modificado=1)then
    if(new.procede_tabla=0)then 
     update producto_stock set stock=stock+1 where idproducto_stock=new.idcarta_lista;
    elseif (new.procede_tabla=1) then 
     update carta_lista set cantidad=if(cantidad!='ND',cantidad+1,'ND') where idcarta_lista=new.idcarta_lista; 
    elseif (new.procede_tabla=2) then 
     UPDATE porcion AS p
            LEFT JOIN item_ingrediente AS ii using (idporcion)
     SET p.stock=p.stock + ((1)*(ii.cantidad))
     WHERE ii.iditem=new.iditem;  
    end if;
end if;
set new.modificado=0;
end

DROP TRIGGER IF EXISTS `stock_en_insert_pedido`;CREATE DEFINER=`root`@`localhost` TRIGGER `stock_en_insert_pedido` AFTER INSERT ON `pedido_detalle` FOR EACH ROW if(new.procede_tabla=0)then 
 update producto_stock set stock=stock-new.cantidad where idproducto_stock=new.idcarta_lista;
elseif (new.procede_tabla=1) then
 update carta_lista set cantidad=if(cantidad!='ND',(cantidad-new.cantidad),'ND') where idcarta_lista=new.idcarta_lista;
elseif (new.procede_tabla=2) then 
 UPDATE porcion AS p
	LEFT JOIN item_ingrediente AS ii using (idporcion)
 SET p.stock=p.stock - (new.cantidad*(ii.cantidad))
 WHERE ii.iditem=new.iditem;
end if

---------------------------------------------------- F1

ALTER TABLE `pedido_borrados` ADD `iditem` INT(10) NOT NULL AFTER `idpedido_detalle`;
ALTER TABLE `usuario` ADD `super` INT(1) NOT NULL DEFAULT '0' AFTER `estado`;
UPDATE `usuario` SET `super` = '1' WHERE `usuario`.`idusuario` = 1;

-------------------------------------- F2
ALTER TABLE `sede` ADD `token` TEXT NOT NULL AFTER `estado`;

// crea tabla tipo_comprobante
CREATE TABLE `restobar`.`tipo_comprobante` ( `idtipo_comprobante` INT(5) NOT NULL AUTO_INCREMENT , `descripcion` VARCHAR(50) NOT NULL , `codsunat` VARCHAR(10) NOT NULL , `estado` INT(1) NOT NULL DEFAULT '0' , PRIMARY KEY (`idtipo_comprobante`)) ENGINE = InnoDB;

INSERT INTO `tipo_comprobante` (`idtipo_comprobante`, `descripcion`, `codsunat`, `estado`) VALUES (NULL, 'NINGUNO', '000', '0'), (NULL, 'TICKET', '002', '0')
INSERT INTO `tipo_comprobante` (`idtipo_comprobante`, `descripcion`, `codsunat`, `estado`) VALUES (NULL, 'BOLETA', '002', '0'), (NULL, 'FACTURA', '003', '0');

// series
CREATE TABLE `restobar`.`tipo_comprobante_serie` ( `idtipo_comprobante_serie` INT(10) NOT NULL AUTO_INCREMENT , `idtipo_comprobante` INT(5) NOT NULL , `idorg` INT(10) NOT NULL , `idsede` INT(10) NOT NULL , `serie` CHAR(5) NOT NULL DEFAULT '0' , `correlativo` INT(10) NOT NULL , `estado` INT(1) NOT NULL DEFAULT '0' , PRIMARY KEY (`idtipo_comprobante_serie`)) ENGINE = InnoDB;
INSERT INTO `tipo_comprobante_serie` (`idtipo_comprobante_serie`, `idtipo_comprobante`, `idorg`, `idsede`, `serie`, `correlativo`, `estado`) VALUES (NULL, '0', '1', '1', '0', '0', '0'), (NULL, '1', '1', '1', '001', '123', '0');
INSERT INTO `tipo_comprobante_serie` (`idtipo_comprobante_serie`, `idtipo_comprobante`, `idorg`, `idsede`, `serie`, `correlativo`, `estado`) VALUES (NULL, '2', '1', '1', '001', '100', '0'), (NULL, '3', '1', '1', '001', '200', '0');

ALTER TABLE `tipo_comprobante` ADD `requiere_cliente` INT(1) NOT NULL DEFAULT '0' AFTER `codsunat`;                                                                                                           

// DROP TRIGGER IF EXISTS `restar_pedido_pd`;CREATE DEFINER=`resto`@`%` TRIGGER `restar_pedido_pd` AFTER INSERT ON `registro_pago_pedido` FOR EACH ROW begin update pedido_detalle set cantidad=(cantidad-new.cantidad), ptotal=format(ptotal-new.total,2),pagado=if(ptotal=0,1,0), idregistro_pago=new.idregistro_pago where idpedido_detalle=new.idpedido_detalle; update pedido p set p.total=0, p.estado=2, p.idregistro_pago = new.idregistro_pago where p.idpedido=new.idpedido and (SELECT count(*) FROM `pedido_detalle` WHERE idpedido=new.idpedido and pagado=0)=0; update pedido_detalle set pagado=if(ptotal="0.00",1,0), idregistro_pago=new.idregistro_pago where idpedido_detalle=new.idpedido_detalle; end

DROP TRIGGER IF EXISTS `restar_pedido_pd`;CREATE DEFINER=`resto`@`%` TRIGGER `restar_pedido_pd` AFTER INSERT ON `registro_pago_pedido` FOR EACH ROW begin update pedido_detalle set cantidad=(cantidad-new.cantidad), ptotal=format(ptotal-new.total,2),pagado=if(ptotal=0,1,0), idregistro_pago=new.idregistro_pago where idpedido_detalle=new.idpedido_detalle; update pedido set total=total-new.total, estado=if(total=0,2,estado),idregistro_pago=if(total=0,new.idregistro_pago,idregistro_pago) where idpedido=new.idpedido; update pedido_detalle set pagado=if(ptotal="0.00",1,0), idregistro_pago=new.idregistro_pago where idpedido_detalle=new.idpedido_detalle; update pedido set estado=if(total=0,2,estado),idregistro_pago=if(total=0,new.idregistro_pago,idregistro_pago) where idpedido=new.idpedido; end;

//crear tabla registro_pago_subtotal
CREATE TABLE `restobar`.`registro_pago_subtotal` ( `idregistro_pago_subtotal` INT(10) NOT NULL AUTO_INCREMENT , `idregistro_pago` INT(10) NOT NULL , `idorg` INT(10) NOT NULL , `idsede` INT(10) NOT NULL , `descripcion` VARCHAR(50) NOT NULL , `importe` CHAR(10) NOT NULL , `estado` INT(1) NOT NULL DEFAULT '0' , PRIMARY KEY (`idregistro_pago_subtotal`)) ENGINE = InnoDB;

ALTER TABLE `pedido` ADD `total_total` VARCHAR(10) NOT NULL COMMENT 'subtotal + adicionales (igv, servicio, taper)' AFTER `total_r`;

ALTER TABLE `sede` ADD `telefono` VARCHAR(30) NOT NULL AFTER `direccion`;
ALTER TABLE `sede` ADD `ciudad` VARCHAR(100) NOT NULL AFTER `nombre`;

ALTER TABLE `registro_pago` ADD `idtipo_comprobante` INT(10) NOT NULL AFTER `idtipo_consumo`;
ALTER TABLE `registro_pago` ADD `serie` CHAR(10) NOT NULL AFTER `idtipo_comprobante`;
ALTER TABLE `registro_pago` ADD `correlativo` VARCHAR(15) NOT NULL COMMENT 'correlativo comprobante' AFTER `serie`;
ALTER TABLE `registro_pago` CHANGE `idtipo_comprobante` `idtipo_comprobante` INT(10) NOT NULL DEFAULT '0';
ALTER TABLE `registro_pago` CHANGE `idtipo_comprobante` `idtipo_comprobante_serie` INT(10) NOT NULL DEFAULT '0';
ALTER TABLE `registro_pago` DROP `serie`;

ALTER TABLE `conf_print` ADD `pie_pagina_comprobante` CHAR(255) NOT NULL COMMENT 'pie de pagina comprobante' AFTER `pie_pagina`;